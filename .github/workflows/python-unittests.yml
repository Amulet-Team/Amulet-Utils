# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unittests

on:
  push:
    branches:
      - master
      - main
      - '[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:

jobs:
  unittests-first-ubuntu:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11', '3.12', '3.13' ]
        os: [ ubuntu-latest ]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash

    steps:
      - name: Clone Amulet-Utils
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip cache purge
          python -m pip install --upgrade pip
          pip install build

      - name: Build Amulet-Utils
        run: |
          pip install -vv .[dev]
          python tests/compile.py

      - name: Test with unittest
        run: python -m unittest discover -v -s tests

  unittests-first-windows-mac:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11', '3.12', '3.13' ]
        os: [ windows-latest, macos-latest ]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash

    steps:
    - name: Clone Amulet-Utils
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip cache purge
        python -m pip install --upgrade pip
        pip install build

    - name: Install Twine
      run: |
        pip install twine

    - name: Clone Amulet-Compiler-Version
      uses: actions/checkout@v4
      with:
        repository: 'Amulet-Team/Amulet-Compiler-Version'
        ref: '1.0'
        path: 'build/pylib/Amulet-Compiler-Version'

    - name: Build Amulet-Compiler-Version
      env:
        BUILD_SPECIALISED: 1
      run: |
        python -m build build/pylib/Amulet-Compiler-Version

    - name: Publish Amulet-Compiler-Version
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.AMULET_COMPILER_VERSION_PYPI_PASSWORD }}
      run: |
        twine upload build/pylib/Amulet-Compiler-Version/dist/* --skip-existing

    - name: Build Amulet-Utils
      env:
        AMULET_FREEZE_COMPILER: 1
      run: |
        pip install -vv .[dev]
        python tests/compile.py

    - name: Test with unittest
      run: python -m unittest discover -v -s tests

  unittests-third:
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11', '3.12', '3.13' ]
        os: [ windows-latest, macos-latest, ubuntu-latest ]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash

    steps:
      - name: Clone Amulet-Utils
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip cache purge
          python -m pip install --upgrade pip
          pip install build

      - name: Build Amulet-Utils
        run: |
          pip install -vv .[dev]
          python tests/compile.py

      - name: Test with unittest
        run: python -m unittest discover -v -s tests
